#!/usr/bin/env node

/**
 * Script para inicializar datos de ejemplo en Cloud Foundry
 * Se ejecuta autom√°ticamente al iniciar la aplicaci√≥n
 */

import { indexDocument } from '../services/ragService.js';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function initializeSampleData() {
  try {
    console.log('üìÑ Inicializando datos de ejemplo...');
    
    const sampleDocsPath = path.join(__dirname, 'sample_documents');
    
    // Verificar si la carpeta existe
    try {
      await fs.access(sampleDocsPath);
    } catch {
      console.log('üìÅ Creando carpeta de documentos de ejemplo...');
      await fs.mkdir(sampleDocsPath, { recursive: true });
    }
    
    // Crear documentos de ejemplo si no existen
    const documents = [
      {
        filename: 'empresa_politicas.md',
        content: `# Pol√≠ticas de la Empresa

## Pol√≠ticas de Vacaciones
- Los empleados tienen derecho a 22 d√≠as de vacaciones al a√±o
- Las vacaciones deben solicitarse con 15 d√≠as de antelaci√≥n
- No se pueden acumular m√°s de 5 d√≠as de un a√±o al siguiente
- Las vacaciones no utilizadas se pierden al final del a√±o fiscal

## Pol√≠ticas de Trabajo Remoto
- El trabajo remoto est√° permitido hasta 3 d√≠as por semana
- Se requiere aprobaci√≥n del supervisor para trabajo remoto
- Debe mantenerse disponibilidad durante horario laboral (9:00-17:00)
- Reuniones importantes requieren presencia f√≠sica

## Pol√≠ticas de Seguridad
- Cambiar contrase√±as cada 90 d√≠as
- No compartir credenciales de acceso con otros empleados
- Reportar incidentes de seguridad inmediatamente al departamento de TI
- Usar autenticaci√≥n de dos factores para sistemas cr√≠ticos

## Beneficios para Empleados
- Seguro m√©dico completo cubierto al 100%
- Plan de pensiones con contribuci√≥n de la empresa del 5%
- Descuentos en gimnasios y actividades deportivas
- Programa de formaci√≥n continua con presupuesto anual de ‚Ç¨2000

## Contacto
Para m√°s informaci√≥n sobre estas pol√≠ticas, contactar a:
- Recursos Humanos: rrhh@empresa.com
- Departamento de TI: it@empresa.com
- Supervisor directo
`
      },
      {
        filename: 'manual_procedimientos.md',
        content: `# Manual de Procedimientos

## Procedimiento de Onboarding
1. Completar documentaci√≥n de RRHH el primer d√≠a
2. Recibir equipo inform√°tico y credenciales de acceso
3. Asistir a sesi√≥n de orientaci√≥n sobre pol√≠ticas de empresa
4. Reuni√≥n con supervisor para definir objetivos
5. Asignaci√≥n de mentor durante los primeros 3 meses

## Procedimiento de Solicitud de Vacaciones
1. Acceder al portal de empleados
2. Seleccionar fechas deseadas (m√≠nimo 15 d√≠as de antelaci√≥n)
3. Obtener aprobaci√≥n del supervisor directo
4. Confirmar cobertura de responsabilidades durante ausencia
5. Recibir confirmaci√≥n por email

## Procedimiento de Trabajo Remoto
1. Solicitar aprobaci√≥n con 48 horas de antelaci√≥n
2. Confirmar disponibilidad de herramientas necesarias
3. Establecer horarios de disponibilidad
4. Reportar progreso diario al supervisor
5. Participar en reuniones virtuales seg√∫n calendario

## Procedimiento de Emergencias
1. Evacuar el edificio por las salidas de emergencia se√±alizadas
2. Dirigirse al punto de encuentro en el parking
3. Esperar instrucciones del coordinador de emergencias
4. No usar ascensores durante evacuaci√≥n
5. Reportar personas desaparecidas al coordinador

## Procedimiento de Solicitud de Formaci√≥n
1. Identificar necesidad de formaci√≥n con supervisor
2. Buscar cursos apropiados dentro del presupuesto asignado
3. Completar formulario de solicitud de formaci√≥n
4. Obtener aprobaci√≥n de RRHH y supervisor
5. Compartir conocimientos adquiridos con el equipo
`
      }
    ];
    
    // Crear archivos si no existen e indexarlos
    for (const doc of documents) {
      const filePath = path.join(sampleDocsPath, doc.filename);
      
      try {
        await fs.access(filePath);
        console.log(`üìÑ Documento ya existe: ${doc.filename}`);
      } catch {
        console.log(`üìù Creando documento: ${doc.filename}`);
        await fs.writeFile(filePath, doc.content, 'utf8');
      }
      
      // Indexar el documento
      try {
        console.log(`üîç Indexando: ${doc.filename}`);
        const result = await indexDocument(filePath, 'text/markdown', {
          originalName: doc.filename,
          source: 'sample_data',
          uploadedAt: new Date().toISOString()
        });
        console.log(`‚úÖ Indexado: ${doc.filename} (${result.totalChunks} chunks)`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è  Error indexando ${doc.filename}:`, error.message);
      }
    }
    
    console.log('‚úÖ Inicializaci√≥n de datos de ejemplo completada');
    
  } catch (error) {
    console.error('‚ùå Error inicializando datos de ejemplo:', error);
  }
}

// Ejecutar si es llamado directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  initializeSampleData();
}

export { initializeSampleData };
